........Games......................
................Fruit Junction..................................
 Code:--


#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <SFML/Window.hpp>
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <map>

int playerLives = 3;
int score = 0;
bool gameOver = false;
sf::Font font;
sf::Text scoreText;

std::map<std::string, sf::Sprite> fruits;
std::map<std::string, sf::Texture> fruitTextures;
std::map<std::string, sf::Texture> explosionTextures;
sf::Texture backgroundTexture;
sf::Sprite background;
sf::Texture livesIconTexture;
sf::Sprite livesIcon;

// Function to load resources
bool loadResources() {
    if (!font.loadFromFile("comic.ttf"))
        return false;  // Return false if font loading fails
    if (!backgroundTexture.loadFromFile("back.jpg"))
        return false;  // Return false if background loading fails
    if (!livesIconTexture.loadFromFile("images/white_lives.png"))
        return false;  // Return false if lives icon loading fails
    if (!fruitTextures["melon"].loadFromFile("images/melon.png"))
        return false;  // Return false if melon texture loading fails
    if (!fruitTextures["orange"].loadFromFile("images/orange.png"))
        return false;  // Return false if orange texture loading fails
    if (!fruitTextures["pomegranate"].loadFromFile("images/pomegranate.png"))
        return false;  // Return false if pomegranate texture loading fails
    if (!fruitTextures["guava"].loadFromFile("images/guava.png"))
        return false;  // Return false if guava texture loading fails
    if (!fruitTextures["bomb"].loadFromFile("images/bomb.png"))
        return false;  // Return false if bomb texture loading fails
    if (!explosionTextures["bomb"].loadFromFile("images/explosion.png"))
        return false;  // Return false if explosion texture loading fails
    
    return true;
}

// Function to generate random fruits
void generateRandomFruits(std::string fruit) {
    int x = rand() % 400 + 100;  // Random x-coordinate
    int y = 800;                 // Starting y-coordinate
    int speed_x = rand() % 21 - 10; // Random horizontal speed (-10 to 10)
    int speed_y = rand() % 21 - 60; // Random vertical speed (-60 to -80)
    
    sf::Sprite fruitSprite(fruitTextures[fruit]);
    fruitSprite.setPosition(x, y);
    
    fruits[fruit] = fruitSprite;
}

// Function to draw text on the screen
void drawText(sf::RenderWindow& window, std::string text, int size, int x, int y) {
    sf::Text renderText;
    renderText.setFont(font);
    renderText.setString(text);
    renderText.setCharacterSize(size);
    renderText.setFillColor(sf::Color::White);
    renderText.setPosition(x, y);
    window.draw(renderText);
}

// Function to draw the player's lives
void drawLives(sf::RenderWindow& window, int lives, int x, int y) {
    for (int i = 0; i < lives; i++) {
        livesIcon.setPosition(x + 35 * i, y);
        window.draw(livesIcon);
    }
}

int main() {
    srand(time(0));  // Seed for random number generator
    
    // Create the window
    sf::RenderWindow window(sf::VideoMode(800, 500), "Fruit Ninja Game -- DataFlair");
    
    if (!loadResources()) {
        std::cerr << "Failed to load resources!" << std::endl;
        return -1;
    }

    background.setTexture(backgroundTexture);
    
    // Main game loop
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        if (gameOver) {
            window.clear();
            drawText(window, "GAME OVER", 90, 300, 100);
            drawText(window, "Score: " + std::to_string(score), 50, 300, 200);
            drawText(window, "Press any key to restart", 50, 300, 300);
            window.display();
            continue;
        }

        // Game logic
        window.clear();
        window.draw(background);
        drawLives(window, playerLives, 690, 10);
        
        // Handle mouse position and check for fruit hits
        sf::Vector2i mousePos = sf::Mouse::getPosition(window);
        
        for (auto& fruitPair : fruits) {
            sf::Sprite& fruit = fruitPair.second;
            fruit.move(0, 10);  // Move fruit downward (simulating gravity)

            if (fruit.getPosition().y > 800) {
                fruit.setPosition(rand() % 400 + 100, -100);  // Reset fruit position
            }

            window.draw(fruit);
            
            // Check for fruit click
            if (fruit.getGlobalBounds().contains(mousePos.x, mousePos.y) && sf::Mouse::isButtonPressed(sf::Mouse::Left)) {
                if (fruitPair.first == "bomb") {
                    playerLives--;
                    if (playerLives == 0) {
                        gameOver = true;
                    }
                } else {
                    score++;
                }

                fruit.setTexture(explosionTextures["bomb"]);
                fruit.setScale(0.5f, 0.5f);
            }
        }

        // Draw score
        scoreText.setString("Score: " + std::to_string(score));
        window.draw(scoreText);
        
        window.display();

        // FPS control
        sf::sleep(sf::seconds(1.f / 12.f)); // 12 FPS (similar to original code)
    }

    return 0;
}



2:.......................................Tic Tac Toe.....................................................................

Code:

#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <SFML/System.hpp>
#include <vector>
#include <iostream>
#include <random>

class TicTacToe {
public:
    TicTacToe() {
        if (!font.loadFromFile("arial.ttf")) {
            std::cout << "Error loading font!" << std::endl;
        }

        window.create(sf::VideoMode(300, 400), "Tic Tac Toe");

        resetGame();
    }

    void run() {
        while (window.isOpen()) {
            handleEvents();
            update();
            render();
        }
    }

private:
    sf::RenderWindow window;
    sf::Font font;
    std::vector<sf::RectangleShape> boardCells;
    std::vector<sf::Text> cellTexts;
    std::vector<char> board;
    char currentPlayer;
    sf::Text statusText;
    bool gameOver;

    void resetGame() {
        board = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
        currentPlayer = 'X';
        gameOver = false;

        boardCells.clear();
        cellTexts.clear();

        float cellSize = 100.f;
        for (int i = 0; i < 9; ++i) {
            sf::RectangleShape cell(sf::Vector2f(cellSize, cellSize));
            cell.setOutlineThickness(2);
            cell.setOutlineColor(sf::Color::Black);
            cell.setFillColor(sf::Color::White);

            int row = i / 3;
            int col = i % 3;
            cell.setPosition(col * cellSize, row * cellSize);

            boardCells.push_back(cell);

            sf::Text cellText("", font, 48);
            cellText.setPosition(col * cellSize + cellSize / 3, row * cellSize + cellSize / 4);
            cellText.setFillColor(sf::Color::Black);

            cellTexts.push_back(cellText);
        }

        statusText.setFont(font);
        statusText.setString("Player X's turn");
        statusText.setCharacterSize(24);
        statusText.setFillColor(sf::Color::Black);
        statusText.setPosition(10.f, 310.f);
    }

    void handleEvents() {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }

            if (!gameOver && event.type == sf::Event::MouseButtonPressed) {
                int x = event.mouseButton.x;
                int y = event.mouseButton.y;

                int row = y / 100;
                int col = x / 100;
                int index = row * 3 + col;

                if (board[index] == ' ') {
                    board[index] = currentPlayer;
                    cellTexts[index].setString(std::string(1, currentPlayer));

                    if (checkWinner()) {
                        gameOver = true;
                        statusText.setString("Player " + std::string(1, currentPlayer) + " wins!");
                    } else if (std::find(board.begin(), board.end(), ' ') == board.end()) {
                        gameOver = true;
                        statusText.setString("It's a tie!");
                    } else {
                        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
                        statusText.setString("Player " + std::string(1, currentPlayer) + "'s turn");
                    }
                }
            }
        }
    }

    void update() {
        // No update needed for now.
    }

    void render() {
        window.clear(sf::Color(240, 240, 240));

        for (const auto& cell : boardCells) {
            window.draw(cell);
        }

        for (const auto& cellText : cellTexts) {
            window.draw(cellText);
        }

        window.draw(statusText);

        if (gameOver) {
            sf::Text restartText("Click to restart", font, 24);
            restartText.setFillColor(sf::Color::Red);
            restartText.setPosition(80.f, 350.f);
            window.draw(restartText);
        }

        window.display();
    }

    bool checkWinner() {
        // Winning combinations
        std::vector<std::vector<int>> winningCombos = {
            {0, 1, 2}, {3, 4, 5}, {6, 7, 8},  // Rows
            {0, 3, 6}, {1, 4, 7}, {2, 5, 8},  // Columns
            {0, 4, 8}, {2, 4, 6}  // Diagonals
        };

        for (const auto& combo : winningCombos) {
            if (board[combo[0]] == board[combo[1]] && board[combo[1]] == board[combo[2]] && board[combo[0]] != ' ') {
                return true;
            }
        }

        return false;
    }
};

int main() {
    TicTacToe game;
    game.run();
    return 0;
}

OUTPUT is in OUTPUT Folder...




