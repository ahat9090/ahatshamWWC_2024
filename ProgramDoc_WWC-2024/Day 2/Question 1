
Q1: Convert Sorted Array to Binary Search Tree

Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.


Code:

#include <iostream>
#include <vector>
using namespace std;


struct TreeNode 
    {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int x) : val(x), left(nullptr), right(nullptr) 
    {
    
    }
};


TreeNode* sortedArrayToBST(vector<int>& nums, int start, int end) 
    {
    
    if (start > end) return nullptr;

    
    int mid = start + (end - start) / 2;

 
    TreeNode* root = new TreeNode(nums[mid]);



    root->left = sortedArrayToBST(nums, start, mid - 1);
    root->right = sortedArrayToBST(nums, mid + 1, end);

    return root;
}


TreeNode* sortedArrayToBST(vector<int>& nums) 
    {
    return sortedArrayToBST(nums, 0, nums.size() - 1);
}


void inOrderTraversal(TreeNode* root) 
    {
    if (!root) return;
    inOrderTraversal(root->left);
    cout << root->val << " ";
    inOrderTraversal(root->right);
}

// Main function
int main() 
    {
    vector<int> nums = {-10, -3, 0, 5, 9};

    TreeNode* root = sortedArrayToBST(nums);

    cout << "In-order Traversal of the BST: ";
    inOrderTraversal(root);
    cout << endl;

    return 0;
}

