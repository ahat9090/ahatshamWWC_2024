
Q5 Minimun  non zero product of an Array Elements
You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. You are allowed to do the following operation any number of times:
 Choose two elements x and y from nums.
Choose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer.
For example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.
Find the minimum non-zero product of nums after performing the above operation any number of times. Return this product modulo 109 + 7.

Code : 

#include <iostream>
#include <cmath>
using namespace std;

const int MOD = 1e9 + 7;

// Function to perform modular exponentiation
long long modExp(long long base, long long exp, long long mod) 
    {
    long long result = 1;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
    }

int minNonZeroProduct(int p)
    {
    long long maxNum = (1LL << p) - 1;        // 2^p - 1
    long long secondMax = maxNum - 1;        // 2^p - 2
    long long count = (1LL << (p - 1)) - 1;  // 2^(p-1) - 1

    // Compute the minimum product modulo 10^9 + 7
    long long result = maxNum % MOD;  // maxNum * (secondMax ^ count) % MOD
    result = (result * modExp(secondMax, count, MOD)) % MOD;

    return result;
    }

int main() 
    {
    int p = 3; // Example input
    cout << "Minimum Non-Zero Product: " << minNonZeroProduct(p) << endl;
    return 0;
    }
